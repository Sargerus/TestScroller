using System.Collections;
using UnityEngine;

public class InvulnerabilityPowerUp : PowerUp
{
    private Animator _animator;
    private GameObject _particleSystem;
    private Pool _pool;
    private float _timePassed = 0;

    private void Awake()
    {
        _pool = Pool.GetInstance();
        _particleSystem = (GameObject)Resources.Load("Prefabs/WallBrokenPS");
    }
    
    private void Start()
    {
        Destroy(transform.GetComponent<PlayerColliderWalls>());

        _animator = transform.parent.GetComponent<Animator>();
        _animator.enabled = true;

        StartCoroutine(PowerUpDurationLoop());
    }
    
    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Wall"))
        {
            Instantiate(_particleSystem, other.transform.position, Quaternion.identity);

            if (other.GetComponent<Wall>() != null)
            {
                MeshRenderer msh = other.GetComponent<MeshRenderer>();
                Color color = msh.material.GetColor("_Color");
                msh.material.color = new Color(color.r, color.g, color.b, 0);
            }
            else _pool.AddToPool(other.gameObject);                
        }
    }

    public override void PowerUpWasPickedAgain()
    {
        _duration += 5.0f;
    }

    protected override IEnumerator PowerUpDurationLoop()
    {
        while (true)
        {
            yield return new WaitForSeconds(0.1f);
            _timePassed += 0.1f;

            if (_timePassed >= _duration)
                break;
        }

        gameObject.AddComponent<PlayerColliderWalls>();
        _animator.enabled = false;
        Destroy(this, 0.5f);
    }
}
